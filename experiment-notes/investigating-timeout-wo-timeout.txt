# No timeout set
# Recovering paths
# Running on instances 9942
# No ground-truth available. Guessing parameter.

File 83.graph instance 9941 name ENSDARG00000039966 with n = 34, m = 40, and truth = ?:
# Preprocessing
#	Graph has an edge cut of size 3.
#	Investigating cutsets yields bound 4.
#	User supplied k value of None.
#	Continuing using k = 4
# Reduced instance has n = 6, m = 12, and lower_bound = 4:
Searching for minimum-sized set of weights, timeout set at -1
# 	Call guess_weight with k = 4
GUESS WEIGHTS k=4
# 	Call guess_weight with k = 5
GUESS WEIGHTS k=5
# 	Call guess_weight with k = 6
GUESS WEIGHTS k=6
# Weights computation took 40.50 seconds
# Solution: {SolvedConstr (7, 347, 370, 403, 819, 1261)}
         33450361 function calls (33198749 primitive calls) in 40.496 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     5797    4.264    0.001   32.873    0.006 _linprog.py:212(_solve_simplex)
   526992    3.562    0.000    8.956    0.000 core.py:2867(__array_finalize__)
   994041    2.415    0.000    2.415    0.000 {method 'reduce' of 'numpy.ufunc' objects}
   592102    2.199    0.000    4.796    0.000 core.py:2841(_update_from)
  5459453    2.184    0.000    2.184    0.000 {built-in method builtins.getattr}
    65110    1.526    0.000    5.290    0.000 core.py:1112(__call__)
  1530148    1.426    0.000    1.426    0.000 {built-in method numpy.core.multiarray.array}
   147018    1.298    0.000    1.451    0.000 flow.py:333(_check_lin_dep)
1126151/925024    1.107    0.000    2.602    0.000 core.py:3267(__setattr__)
    83101    0.931    0.000    1.493    0.000 flow.py:275(_copy_with_new_row)
    65110    0.909    0.000   18.184    0.000 _linprog.py:173(_pivot_row)
   390975    0.868    0.000    4.493    0.000 core.py:3579(filled)
     5482    0.823    0.000   34.564    0.006 _linprog.py:391(_linprog_simplex)
   461252    0.806    0.000    0.806    0.000 {built-in method numpy.core.multiarray.copyto}
   201127    0.781    0.000    1.624    0.000 core.py:3298(__setmask__)
   147018    0.581    0.000    4.135    0.000 flow.py:363(add_constraint)
  2895400    0.578    0.000    0.578    0.000 {method 'update' of 'dict' objects}
    70907    0.566    0.000   10.390    0.000 _linprog.py:137(_pivot_col)
   130220    0.564    0.000    4.405    0.000 core.py:3833(__eq__)
  3582427    0.551    0.000    0.551    0.000 {built-in method builtins.isinstance}
   620779    0.528    0.000    0.528    0.000 {method 'copy' of 'numpy.ndarray' objects}
   117097    0.522    0.000    1.228    0.000 flow.py:561(push)
   390975    0.499    0.000    1.284    0.000 core.py:398(_check_fill_value)
   402254    0.480    0.000    0.658    0.000 core.py:1263(make_mask_descr)
   728119    0.456    0.000    0.456    0.000 {built-in method builtins.hasattr}
   201127    0.455    0.000    7.908    0.000 core.py:1764(masked_where)
   396457    0.417    0.000    7.104    0.000 {method 'view' of 'numpy.ndarray' objects}
   130220    0.380    0.000    6.406    0.000 core.py:5434(min)
   290435    0.368    0.000    0.368    0.000 {built-in method numpy.core.multiarray.zeros}
      246    0.365    0.001   40.486    0.165 dp.py:14(solve)
   521195    0.353    0.000    0.353    0.000 core.py:3487(_get_data)
   201127    0.351    0.000    1.720    0.000 core.py:1486(make_mask)
    65110    0.324    0.000    0.403    0.000 core.py:804(__call__)
   130220    0.315    0.000    2.578    0.000 {method 'view' of 'numpy.generic' objects}
   116248    0.293    0.000    0.380    0.000 flow.py:513(copy)
   597584    0.292    0.000    1.782    0.000 {method 'any' of 'numpy.ndarray' objects}
   136017    0.279    0.000    1.044    0.000 core.py:4229(count)
   130220    0.258    0.000    0.431    0.000 numerictypes.py:603(obj2sctype)
   130220    0.257    0.000    0.606    0.000 numeric.py:2576(seterr)
   396457    0.253    0.000    2.010    0.000 core.py:559(filled)
   130220    0.231    0.000    0.246    0.000 numeric.py:2676(geterr)
    65110    0.195    0.000    0.285    0.000 core.py:605(get_masked_subclass)
   597584    0.195    0.000    1.489    0.000 _methods.py:37(_any)
    83347    0.192    0.000    0.527    0.000 flow.py:239(__init__)
   332404    0.191    0.000    0.258    0.000 copy.py:66(copy)
   117097    0.179    0.000    0.325    0.000 flow.py:592(distribute)
   122032    0.178    0.000    0.286    0.000 shape_base.py:61(atleast_2d)
   130220    0.175    0.000    1.885    0.000 core.py:6950(where)
   260440    0.175    0.000    0.175    0.000 {built-in method builtins.issubclass}
   136017    0.174    0.000    0.720    0.000 fromnumeric.py:1743(sum)
   122032    0.142    0.000    0.142    0.000 {built-in method numpy.core.multiarray.concatenate}
   130220    0.141    0.000    0.702    0.000 core.py:237(_recursive_extremum_fill_value)
   201127    0.140    0.000    0.653    0.000 core.py:1581(make_mask_none)
   130220    0.130    0.000    0.561    0.000 numerictypes.py:774(__getitem__)
  1449164    0.124    0.000    0.124    0.000 {built-in method builtins.len}
    65110    0.123    0.000    5.452    0.000 core.py:3963(__truediv__)
   130220    0.122    0.000    0.508    0.000 {method 'all' of 'numpy.ndarray' objects}
   130220    0.118    0.000    0.118    0.000 {method 'nonzero' of 'numpy.ndarray' objects}
    36254    0.115    0.000    0.115    0.000 {built-in method builtins.sorted}
   402254    0.111    0.000    0.111    0.000 core.py:1242(_recursive_make_descr)
   130220    0.104    0.000    0.449    0.000 {method 'min' of 'numpy.ndarray' objects}
   130220    0.103    0.000    0.836    0.000 core.py:248(minimum_fill_value)
    65110    0.079    0.000    0.079    0.000 {built-in method numpy.core.multiarray.can_cast}
   130220    0.072    0.000    0.072    0.000 {built-in method numpy.core.umath.seterrobj}
    25534    0.071    0.000    0.093    0.000 partition.py:17(visit)
   397515    0.071    0.000    0.071    0.000 {method 'get' of 'dict' objects}
    65110    0.071    0.000    0.433    0.000 numeric.py:2967(__enter__)
   130220    0.065    0.000    0.573    0.000 core.py:1753(_check_mask_axis)
    65110    0.064    0.000    0.309    0.000 numeric.py:2972(__exit__)
   116740    0.064    0.000    0.064    0.000 flow.py:503(__init__)
   130220    0.061    0.000    0.140    0.000 core.py:632(getdata)
   128200    0.059    0.000    0.059    0.000 flow.py:472(add_constraint)
    65110    0.057    0.000    0.072    0.000 numeric.py:2963(__init__)
    65110    0.054    0.000    0.054    0.000 core.py:619(<listcomp>)
     6218    0.051    0.000   34.673    0.006 flow.py:298(is_redundant)
    61016    0.051    0.000    0.466    0.000 shape_base.py:180(vstack)
   136017    0.048    0.000    0.525    0.000 _methods.py:31(_sum)
   260440    0.047    0.000    0.047    0.000 {built-in method numpy.core.umath.geterrobj}
   136017    0.045    0.000    0.045    0.000 fromnumeric.py:2659(size)
   130220    0.044    0.000    0.386    0.000 _methods.py:40(_all)
    61016    0.044    0.000    0.330    0.000 shape_base.py:230(<listcomp>)
   157945    0.044    0.000    0.094    0.000 numeric.py:414(asarray)
   130220    0.042    0.000    0.345    0.000 _methods.py:28(_amin)
   130220    0.039    0.000    0.063    0.000 core.py:1299(getmask)
   138478    0.035    0.000    0.078    0.000 numeric.py:484(asanyarray)
66098/26383    0.033    0.000    0.144    0.000 partition.py:23(f)
    65110    0.029    0.000    0.038    0.000 core.py:3823(_delegate_binop)
    36254    0.027    0.000    0.027    0.000 {method 'astype' of 'numpy.ndarray' objects}
   267338    0.027    0.000    0.027    0.000 {method 'append' of 'list' objects}
     5482    0.027    0.000   34.592    0.006 _linprog.py:824(linprog)
   130220    0.026    0.000    0.026    0.000 {method 'count' of 'tuple' objects}
   236796    0.025    0.000    0.025    0.000 {method 'items' of 'dict' objects}
   101753    0.024    0.000    0.024    0.000 {built-in method builtins.hash}
    11653    0.019    0.000    0.019    0.000 {built-in method builtins.max}
     5482    0.019    0.000    0.019    0.000 index_tricks.py:665(fill_diagonal)
    83347    0.018    0.000    0.018    0.000 {method 'tobytes' of 'memoryview' objects}
28389/17619    0.017    0.000    0.076    0.000 partition.py:55(b)
   166202    0.017    0.000    0.017    0.000 copy.py:111(_copy_immutable)
    65110    0.015    0.000    0.015    0.000 {method 'pop' of 'dict' objects}
     7422    0.015    0.000    0.018    0.000 flow.py:438(__init__)
    36254    0.014    0.000    0.014    0.000 {method 'tolist' of 'numpy.ndarray' objects}
    10964    0.011    0.000    0.031    0.000 fromnumeric.py:1383(ravel)
    10964    0.011    0.000    0.011    0.000 {method 'ravel' of 'numpy.ndarray' objects}
    25534    0.009    0.000    0.009    0.000 partition.py:18(<listcomp>)
     5797    0.007    0.000    0.007    0.000 {built-in method numpy.core.multiarray.empty}
     7337    0.006    0.000    0.013    0.000 {built-in method builtins.all}
     1571    0.006    0.000    0.006    0.000 guess_weight.py:43(is_feasible)
    15477    0.005    0.000    0.005    0.000 flow.py:302(<genexpr>)
     5482    0.005    0.000    0.039    0.000 fromnumeric.py:1892(any)
     5482    0.005    0.000    0.024    0.000 numeric.py:148(ones)
     3070    0.004    0.000    0.005    0.000 flow.py:558(__hash__)
      315    0.004    0.000    0.005    0.000 function_base.py:4121(delete)
    41506    0.004    0.000    0.004    0.000 {method 'is_integer' of 'float' objects}
     5482    0.004    0.000    0.004    0.000 optimize.py:112(__getattr__)
     6218    0.004    0.000    0.004    0.000 flow.py:301(<listcomp>)
     5482    0.003    0.000    0.003    0.000 {built-in method numpy.core.multiarray.count_nonzero}
     1119    0.003    0.000    0.006    0.000 flow.py:449(is_redundant)
        3    0.003    0.001   40.495   13.498 guess_weight.py:62(solve)
      315    0.002    0.000    0.011    0.000 core.py:2707(__new__)
      849    0.002    0.000    0.002    0.000 partition.py:15(algorithm_u)
      962    0.002    0.000    0.003    0.000 flow.py:541(__eq__)
      849    0.002    0.000    0.002    0.000 graphs.py:67(labeled_neighborhood)
     5482    0.002    0.000    0.002    0.000 {built-in method builtins.abs}
      315    0.002    0.000    0.002    0.000 _linprog.py:325(<listcomp>)
     6290    0.002    0.000    0.002    0.000 flow.py:452(<genexpr>)
     5482    0.002    0.000    0.002    0.000 {method 'lower' of 'str' objects}
     5482    0.001    0.000    0.001    0.000 optimize.py:137(_check_unknown_options)
     1729    0.001    0.000    0.002    0.000 {method 'add' of 'set' objects}
      315    0.001    0.000    0.012    0.000 core.py:6133(array)
      248    0.001    0.000    0.003    0.000 graphs.py:61(sink)
     1488    0.001    0.000    0.002    0.000 graphs.py:126(out_degree)
     1500    0.001    0.000    0.001    0.000 graphs.py:78(neighborhood)
     1488    0.000    0.000    0.001    0.000 graphs.py:84(out_neighborhood)
     1969    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
      248    0.000    0.000    0.001    0.000 graphs.py:55(source)
      315    0.000    0.000    0.000    0.000 index_tricks.py:650(__getitem__)
      315    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}
     1267    0.000    0.000    0.000    0.000 flow.py:496(__hash__)
      498    0.000    0.000    0.000    0.000 graphs.py:52(__iter__)
      248    0.000    0.000    0.000    0.000 graphs.py:129(in_degree)
      708    0.000    0.000    0.000    0.000 flow.py:429(__hash__)
      315    0.000    0.000    0.000    0.000 core.py:3509(get_fill_value)
      183    0.000    0.000    0.000    0.000 flow.py:482(__eq__)
      248    0.000    0.000    0.000    0.000 graphs.py:87(in_neighborhood)
      246    0.000    0.000    0.000    0.000 flow.py:269(<listcomp>)
      498    0.000    0.000    0.000    0.000 {built-in method builtins.iter}
       12    0.000    0.000    0.000    0.000 _linprog.py:327(<listcomp>)
        1    0.000    0.000   40.496   40.496 toboggan.py:77(find_opt_size)
        2    0.000    0.000    0.000    0.000 flow.py:60(_compute_max_weight_bounds)
        3    0.000    0.000    0.000    0.000 flow.py:211(has_bad_bounds)
        9    0.000    0.000    0.000    0.000 {built-in method builtins.print}
        2    0.000    0.000    0.000    0.000 flow.py:81(_compute_weight_bounds)
        4    0.000    0.000    0.000    0.000 twodim_base.py:192(eye)
        8    0.000    0.000    0.000    0.000 {method 'format' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.arange}
        2    0.000    0.000    0.000    0.000 flow.py:198(try_larger_k)
       26    0.000    0.000    0.000    0.000 {built-in method builtins.min}
        1    0.000    0.000    0.000    0.000 flow.py:446(__repr__)
        1    0.000    0.000    0.000    0.000 getlimits.py:94(__new__)
        2    0.000    0.000    0.000    0.000 flow.py:72(<dictcomp>)
       14    0.000    0.000    0.000    0.000 guess_weight.py:75(<genexpr>)
        2    0.000    0.000    0.000    0.000 flow.py:97(<listcomp>)
        1    0.000    0.000    0.000    0.000 {built-in method time.time}
        1    0.000    0.000    0.000    0.000 toboggan.py:32(__init__)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        2    0.000    0.000    0.000    0.000 flow.py:101(<listcomp>)
       22    0.000    0.000    0.000    0.000 guess_weight.py:83(<lambda>)
        1    0.000    0.000    0.000    0.000 toboggan.py:44(__exit__)
        1    0.000    0.000    0.000    0.000 toboggan.py:39(__enter__)


#	Now recovering the 6 paths in the solution (7, 347, 370, 403, 819, 1261)
# Recovery took 0.01 seconds
# Paths, weights pass test: flow decomposition confirmed.
# Solutions:
# 	Path with weight = 7
# 	[0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33]
# 	Path with weight = 347
# 	[0, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33]
# 	Path with weight = 370
# 	[0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 33]
# 	Path with weight = 403
# 	[0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33]
# 	Path with weight = 819
# 	[0, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
# 	Path with weight = 1261
# 	[0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33]
Finished instance.

